import fs from 'fs';
import path from 'path';
import MFS from 'memory-fs';
import webpack from 'webpack';
import webpackDevMiddleware from 'webpack-dev-middleware';
import webpackHotMiddleware from 'webpack-hot-middleware';
import webpackClient from './config/webpack-client.babel';
import webpackServer from './config/webpack-server.babel';

// eslint-disable-next-line no-sync
const readFile = (fileSystem, file) =>
  // eslint-disable-next-line no-sync
  fileSystem.readFileSync(path.join(webpackClient.output.path, file), 'utf-8');

export default function setupDevServer(app, templatePath, cb) {
  return new Promise((resolve) => {
    let bundle = null,
      clientManifest = null;
    // eslint-disable-next-line no-sync
    const template = fs.readFileSync(templatePath, 'utf-8'),
      update = () => {
        if (bundle && clientManifest) {
          resolve();
          cb(bundle, {
            template,
            clientManifest
          });
        }
      };

    // modify client config to work with hot middleware
    webpackClient.entry = [
      'webpack-hot-middleware/client?path=http://localhost:3000/__webpack_hmr&reload=true',
      webpackClient.entry
    ];
    webpackClient.output.filename = '[name].js';
    webpackClient.plugins.push(
      new webpack.HotModuleReplacementPlugin(),
      new webpack.NoEmitOnErrorsPlugin()
    );

    // dev middleware
    const clientCompiler = webpack(webpackClient);
    const devMiddleware = webpackDevMiddleware(clientCompiler, {
      publicPath: webpackClient.output.publicPath,
      logLevel: 'warn'
    });

    app.use(devMiddleware);

    clientCompiler.plugin('done', (compiledStats) => {
      const stats = compiledStats.toJson();

      // eslint-disable-next-line no-console
      stats.errors.forEach((err) => console.error(err));
      // eslint-disable-next-line no-console
      stats.warnings.forEach((err) => console.warn(err));
      if (stats.errors.length) {
        return;
      }
      clientManifest = JSON.parse(
        readFile(devMiddleware.fileSystem, 'vue-ssr-client-manifest.json')
      );
      update();
    });

    // hot middleware
    app.use(webpackHotMiddleware(clientCompiler));

    // watch and update server renderer
    const serverCompiler = webpack(webpackServer);
    const mfs = new MFS();

    serverCompiler.outputFileSystem = mfs;
    serverCompiler.watch({}, (err, compiledStats) => {
      if (err) {
        throw err;
      }
      const stats = compiledStats.toJson();

      if (stats.errors.length) {
        return;
      }

      // read bundle generated by vue-ssr-webpack-plugin
      bundle = JSON.parse(readFile(mfs, 'vue-ssr-bundle.json'));
      update();
    });
  });
}
